# 从pydantic库导入BaseModel类
from pydantic import BaseModel
# 从typing库导入List, Dict, Literal和Optional类型
from typing import List, Dict, Literal, Optional

# 定义一个FunctionCall类，继承自BaseModel
class FunctionCall(BaseModel):
    # 定义一个字典类型的变量arguments，存储函数调用时的参数
    arguments: dict
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
        参数调用的具体内容，由模型以JSON格式生成。注意，模型不总是生成有效的JSON，并可能
    幻觉出未由您的函数架构定义的参数。在调用函数前验证代码中的参数。
    """
    # 定义一个字符串类型的变量name，表示函数的名称
    name: str
    """The name of the function to call.（调用的函数名称）"""

# 定义一个FunctionDefinition类，继承自BaseModel
class FunctionDefinition(BaseModel):
    # 定义一个字符串类型的变量name，存储函数的名称
    name: str
    # 定义一个可选的字符串类型的变量description，默认为None，存储函数的描述信息
    description: Optional[str] = None
    # 定义一个可选的字典类型的变量parameters，默认为None，字典的键为字符串类型，值为任意类型，存储函数的参数信息
    parameters: Optional[Dict[str, object]] = None

# 定义一个FunctionSignature类，继承自BaseModel
class FunctionSignature(BaseModel):
    # 定义一个FunctionDefinition类型的变量function，表示该签名所属的函数定义
    function: FunctionDefinition
    # 定义一个Literal类型的变量type，只能赋值为"function"，表示这是一个函数类型的签名
    type: Literal["function"]
